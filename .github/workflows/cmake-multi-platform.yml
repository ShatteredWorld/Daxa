# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "personal" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Debug, RelWithDebInfo, Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            os_name: windows
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
            os_name: linux
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            os_name: linux
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Cache CMake build
      uses: actions/cache@v4
      with:
        path: |
          ${{ github.workspace }}/build
          ~/.ccache
        key: ${{ runner.os }}-${{ matrix.c_compiler }}-${{ matrix.build_type }}-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.c_compiler }}-${{ matrix.build_type }}-
          ${{ runner.os }}-${{ matrix.c_compiler }}-
          ${{ runner.os }}-

    - name: Setup Vulkan SDK
      uses: humbletim/setup-vulkan-sdk@v1.2.1
      with:
        vulkan-query-version: 1.4.304.1
        vulkan-components: Vulkan-Headers, Vulkan-Loader
        vulkan-use-cache: true

    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y
        sudo apt-get update

        sudo apt-get install -y gcc-14 g++-14 clang-19 libwayland-dev libxkbcommon-dev xorg-dev libxcb1-dev
        
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-14 100
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-14 100
        sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-19 100
        sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-19 100

        echo "/usr/lib/ccache" >> $GITHUB_PATH

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DDAXA_ENABLE_UTILS_FSR3=false
        -DDAXA_ENABLE_UTILS_IMGUI=false
        -DDAXA_ENABLE_UTILS_MEM=true
        -DDAXA_ENABLE_UTILS_PIPELINE_MANAGER_GLSLANG=true
        -DDAXA_ENABLE_UTILS_PIPELINE_MANAGER_SLANG=true
        -DDAXA_ENABLE_UTILS_PIPELINE_MANAGER_SPIRV_VALIDATION=false
        -DDAXA_ENABLE_UTILS_TASK_GRAPH=true
        -DDAXA_ENABLE_TESTS=false
        -DDAXA_ENABLE_TOOLS=false
        -DDAXA_ENABLE_STATIC_ANALYSIS=false
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Install
      run: cmake --install ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --prefix ${{ github.workspace }}/install

    - name: Package build artifacts
      shell: bash
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cd "${{ github.workspace }}/install"
          7z a -tzip "${{ github.workspace }}/${{ matrix.os_name }}-${{ matrix.c_compiler }}-${{ matrix.build_type }}.zip" .
        else
          cd "${{ github.workspace }}/install"
          zip -r "${{ github.workspace }}/${{ matrix.os_name }}-${{ matrix.c_compiler }}-${{ matrix.build_type }}.zip" .
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os_name }}-${{ matrix.c_compiler }}-${{ matrix.build_type }}
        path: ${{ github.workspace }}/${{ matrix.os_name }}-${{ matrix.c_compiler }}-${{ matrix.build_type }}.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/personal'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Generate release tag
      id: tag
      run: |
        DATE=$(date +%Y-%m-%d)
        # Check if a release with today's date already exists
        EXISTING_RELEASES=$(gh release list --repo ${{ github.repository }} --json tagName --jq '.[] | select(.tagName | startswith("'$DATE'")) | .tagName' | wc -l)
        if [ $EXISTING_RELEASES -eq 0 ]; then
          TAG="$DATE"
        else
          VERSION=$((EXISTING_RELEASES + 1))
          TAG="$DATE.$VERSION"
        fi
        echo "tag=$TAG" >> "$GITHUB_OUTPUT"
        echo "Generated tag: $TAG"
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        name: Release ${{ steps.tag.outputs.tag }}
        body: ${{ github.event.head_commit.message }}
        draft: false
        prerelease: false
        files: artifacts/**/*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
